{
	"id": "1f2dffaa32ee654fa1233998890f8880",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.23",
	"solcLongVersion": "0.8.23+commit.f704f362",
	"input": {
		"language": "Solidity",
		"sources": {
			"fury/contracts/contracts/utils/Counters.sol": {
				"content": "pragma solidity ^0.8.19;\n\n/**\n * @title Counter\n * @author Matt Condon (@shrugs)\n * @dev Provides an incrementing uint256 id acquired by the `Counter#next` getter.\n * Use this for issuing ERC721 ids or keeping track of request ids, anything you want, really.\n *\n * Include with `using Counter for Counter.Counter;`\n * @notice Does not allow an Id of 0, which is popularly used to signify a null state in solidity.\n * Does not protect from overflows, but if you have 2^256 ids, you have other problems.\n * (But actually, it's generally impossible to increment a counter this many times, energy wise\n * so it's not something you have to worry about.)\n */\ncontract Counter {\n\n  struct Counter {\n    uint256 current; // default: 0\n  }\n\n  function next(Counter storage index)\n    internal\n    returns (uint256)\n  {\n    index.current += 1;\n    return index.current;\n  }\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"fury/contracts/contracts/utils/Counters.sol": {
				"Counter": {
					"abi": [],
					"devdoc": {
						"author": "Matt Condon (@shrugs)",
						"details": "Provides an incrementing uint256 id acquired by the `Counter#next` getter. Use this for issuing ERC721 ids or keeping track of request ids, anything you want, really. Include with `using Counter for Counter.Counter;`",
						"kind": "dev",
						"methods": {},
						"title": "Counter",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"fury/contracts/contracts/utils/Counters.sol\":653:865  contract Counter {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"fury/contracts/contracts/utils/Counters.sol\":653:865  contract Counter {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122080c1f7427a1671ee2881230dcb8a67a7d1dd0ccb249907c8ed056f1b709523fd64736f6c63430008170033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600e575f80fd5b50603e80601a5f395ff3fe60806040525f80fdfea264697066735822122080c1f7427a1671ee2881230dcb8a67a7d1dd0ccb249907c8ed056f1b709523fd64736f6c63430008170033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x1A PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP1 0xC1 0xF7 TIMESTAMP PUSH27 0x1671EE2881230DCB8A67A7D1DD0CCB249907C8ED056F1B709523FD PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "653:212:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040525f80fdfea264697066735822122080c1f7427a1671ee2881230dcb8a67a7d1dd0ccb249907c8ed056f1b709523fd64736f6c63430008170033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP1 0xC1 0xF7 TIMESTAMP PUSH27 0x1671EE2881230DCB8A67A7D1DD0CCB249907C8ED056F1B709523FD PUSH5 0x736F6C6343 STOP ADDMOD OR STOP CALLER ",
							"sourceMap": "653:212:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12400",
								"executionCost": "64",
								"totalCost": "12464"
							},
							"internal": {
								"next(struct Counter.Counter storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 653,
									"end": 865,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 653,
									"end": 865,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 653,
									"end": 865,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 653,
									"end": 865,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 653,
									"end": 865,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 653,
									"end": 865,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 653,
									"end": 865,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 653,
									"end": 865,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 653,
									"end": 865,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 653,
									"end": 865,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 653,
									"end": 865,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 653,
									"end": 865,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 653,
									"end": 865,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 653,
									"end": 865,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 653,
									"end": 865,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 653,
									"end": 865,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 653,
									"end": 865,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 653,
									"end": 865,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 653,
									"end": 865,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 653,
									"end": 865,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 653,
									"end": 865,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122080c1f7427a1671ee2881230dcb8a67a7d1dd0ccb249907c8ed056f1b709523fd64736f6c63430008170033",
									".code": [
										{
											"begin": 653,
											"end": 865,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 653,
											"end": 865,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 653,
											"end": 865,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 653,
											"end": 865,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 653,
											"end": 865,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 653,
											"end": 865,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"fury/contracts/contracts/utils/Counters.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides an incrementing uint256 id acquired by the `Counter#next` getter. Use this for issuing ERC721 ids or keeping track of request ids, anything you want, really. Include with `using Counter for Counter.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Does not allow an Id of 0, which is popularly used to signify a null state in solidity. Does not protect from overflows, but if you have 2^256 ids, you have other problems. (But actually, it's generally impossible to increment a counter this many times, energy wise so it's not something you have to worry about.)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"fury/contracts/contracts/utils/Counters.sol\":\"Counter\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"fury/contracts/contracts/utils/Counters.sol\":{\"keccak256\":\"0x0614e488a3816dff7b27d1c0c96ff31cbe94b551f58e9eedf668aa6c53ada864\",\"urls\":[\"bzz-raw://31f17bf4ca21361318ee2b75b7786403636659295c35875d12c7ed844a8d8b00\",\"dweb:/ipfs/QmYN7DsJFe4JzsvFaPvL3jvZVe3rau822h8idmhv7SXRxZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Does not allow an Id of 0, which is popularly used to signify a null state in solidity. Does not protect from overflows, but if you have 2^256 ids, you have other problems. (But actually, it's generally impossible to increment a counter this many times, energy wise so it's not something you have to worry about.)",
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> fury/contracts/contracts/utils/Counters.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "fury/contracts/contracts/utils/Counters.sol",
					"start": -1
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2519",
				"formattedMessage": "Warning: This declaration shadows an existing declaration.\n  --> fury/contracts/contracts/utils/Counters.sol:17:3:\n   |\n17 |   struct Counter {\n   |   ^ (Relevant source part starts here and spans across multiple lines).\nNote: The shadowed declaration is here:\n  --> fury/contracts/contracts/utils/Counters.sol:15:1:\n   |\n15 | contract Counter {\n   | ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "This declaration shadows an existing declaration.",
				"secondarySourceLocations": [
					{
						"end": 865,
						"file": "fury/contracts/contracts/utils/Counters.sol",
						"message": "The shadowed declaration is here:",
						"start": 653
					}
				],
				"severity": "warning",
				"sourceLocation": {
					"end": 730,
					"file": "fury/contracts/contracts/utils/Counters.sol",
					"start": 675
				},
				"type": "Warning"
			}
		],
		"sources": {
			"fury/contracts/contracts/utils/Counters.sol": {
				"ast": {
					"absolutePath": "fury/contracts/contracts/utils/Counters.sol",
					"exportedSymbols": {
						"Counter": [
							24
						]
					},
					"id": 25,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "0:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Counter",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "26:626:0",
								"text": " @title Counter\n @author Matt Condon (@shrugs)\n @dev Provides an incrementing uint256 id acquired by the `Counter#next` getter.\n Use this for issuing ERC721 ids or keeping track of request ids, anything you want, really.\n Include with `using Counter for Counter.Counter;`\n @notice Does not allow an Id of 0, which is popularly used to signify a null state in solidity.\n Does not protect from overflows, but if you have 2^256 ids, you have other problems.\n (But actually, it's generally impossible to increment a counter this many times, energy wise\n so it's not something you have to worry about.)"
							},
							"fullyImplemented": true,
							"id": 24,
							"linearizedBaseContracts": [
								24
							],
							"name": "Counter",
							"nameLocation": "662:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Counter.Counter",
									"id": 5,
									"members": [
										{
											"constant": false,
											"id": 4,
											"mutability": "mutable",
											"name": "current",
											"nameLocation": "704:7:0",
											"nodeType": "VariableDeclaration",
											"scope": 5,
											"src": "696:15:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "696:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Counter",
									"nameLocation": "682:7:0",
									"nodeType": "StructDefinition",
									"scope": 24,
									"src": "675:55:0",
									"visibility": "public"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "808:55:0",
										"statements": [
											{
												"expression": {
													"id": 17,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 13,
															"name": "index",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 8,
															"src": "814:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$5_storage_ptr",
																"typeString": "struct Counter.Counter storage pointer"
															}
														},
														"id": 15,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "820:7:0",
														"memberName": "current",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 4,
														"src": "814:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 16,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "831:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "814:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 18,
												"nodeType": "ExpressionStatement",
												"src": "814:18:0"
											},
											{
												"expression": {
													"expression": {
														"id": 19,
														"name": "index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "845:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$5_storage_ptr",
															"typeString": "struct Counter.Counter storage pointer"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "851:7:0",
													"memberName": "current",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 4,
													"src": "845:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 12,
												"id": 21,
												"nodeType": "Return",
												"src": "838:20:0"
											}
										]
									},
									"id": 23,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "next",
									"nameLocation": "743:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "764:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "748:21:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$5_storage_ptr",
													"typeString": "struct Counter.Counter"
												},
												"typeName": {
													"id": 7,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 6,
														"name": "Counter",
														"nameLocations": [
															"748:7:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 5,
														"src": "748:7:0"
													},
													"referencedDeclaration": 5,
													"src": "748:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$5_storage_ptr",
														"typeString": "struct Counter.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "747:23:0"
									},
									"returnParameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "797:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 10,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "797:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "796:9:0"
									},
									"scope": 24,
									"src": "734:129:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 25,
							"src": "653:212:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "0:865:0"
				},
				"id": 0
			}
		}
	}
}